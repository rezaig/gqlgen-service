package gqlsvc

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/rezaindra/gqlgen-todos/internal/delivery/gqlsvc/generated"
	"github.com/rezaindra/gqlgen-todos/internal/delivery/gqlsvc/gqlmodel"
	"github.com/rezaindra/gqlgen-todos/internal/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input gqlmodel.CreateTodoInput) (*model.Todo, error) {
	return &model.Todo{
		ID:     "1",
		Text:   "blah",
		UserID: "123",
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return []*model.Todo{
		{
			ID:     "1",
			Text:   "blah",
			UserID: "123",
		},
	}, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{
		ID: "123",
	}, nil
}

// Blah is the resolver for the blah field.
func (r *todoResolver) Blah(ctx context.Context, obj *model.Todo) (*gqlmodel.Blah, error) {
	panic(fmt.Errorf("not implemented: Blah - blah"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Todo returns generated.TodoResolver implementation.
func (r *Resolver) Todo() generated.TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
